{"ast":null,"code":"var _jsxFileName = \"/home/ian/js/Blockchain-Project/src/Components/Table/table.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useExpanded } from 'react-table'; // A simple way to support a renderRowSubComponent is to make a render prop\n// This is NOT part of the React Table API, it's merely a rendering\n// option we are creating for ourselves in our table renderer\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Table(_ref) {\n  _s();\n\n  let {\n    columns,\n    data,\n    renderRowSubComponent\n  } = _ref;\n  console.log(columns);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    visibleColumns,\n    // eslint-disable-next-line no-unused-vars\n    state: {\n      expanded\n    }\n  } = useTable({\n    columns,\n    data\n  }, useExpanded // We can useExpanded to track the expanded state\n  // for sub components too!\n  );\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            /*#__PURE__*/\n            // Use a React.Fragment here so the table markup is still valid\n            _jsxDEV(React.Fragment, { ...row.getRowProps(),\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: row.cells.map(cell => {\n                  return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                    children: cell.render('Cell')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 48,\n                    columnNumber: 18\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 9\n              }, this), row.isExpanded ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: visibleColumns.length,\n                  children: renderRowSubComponent({\n                    row\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 10\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 8\n            }, this)\n          );\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Showing the first 20 results of \", rows.length, \" rows\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Table, \"9x01AonwCOZVBrIM8wRVJSMzMAw=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useTable","useExpanded","Table","columns","data","renderRowSubComponent","console","log","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","visibleColumns","state","expanded","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","isExpanded","length"],"sources":["/home/ian/js/Blockchain-Project/src/Components/Table/table.js"],"sourcesContent":["import React from 'react';\n\nimport { useTable, useExpanded } from 'react-table';\n\n// A simple way to support a renderRowSubComponent is to make a render prop\n// This is NOT part of the React Table API, it's merely a rendering\n// option we are creating for ourselves in our table renderer\nfunction Table({ columns, data, renderRowSubComponent }) {\n\tconsole.log(columns);\n\tconst {\n\t\tgetTableProps,\n\t\tgetTableBodyProps,\n\t\theaderGroups,\n\t\trows,\n\t\tprepareRow,\n\t\tvisibleColumns,\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tstate: { expanded },\n\t} = useTable(\n\t\t{\n\t\t\tcolumns,\n\t\t\tdata,\n\t\t},\n\t\tuseExpanded // We can useExpanded to track the expanded state\n\t\t// for sub components too!\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<table {...getTableProps()}>\n\t\t\t\t<thead>\n\t\t\t\t\t{headerGroups.map((headerGroup) => (\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\n\t\t\t\t\t\t\t\t<th {...column.getHeaderProps()}>{column.render('Header')}</th>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</thead>\n\t\t\t\t<tbody {...getTableBodyProps()}>\n\t\t\t\t\t{rows.map((row, i) => {\n\t\t\t\t\t\tprepareRow(row);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t// Use a React.Fragment here so the table markup is still valid\n\t\t\t\t\t\t\t<React.Fragment {...row.getRowProps()}>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\n\t\t\t\t\t\t\t\t\t\treturn <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t{/*\n                    If the row is in an expanded state, render a row with a\n                    column that fills the entire length of the table.\n                  */}\n\t\t\t\t\t\t\t\t{row.isExpanded ? (\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td colSpan={visibleColumns.length}>\n\t\t\t\t\t\t\t\t\t\t\t{/*\n                          Inside it, call our renderRowSubComponent function. In reality,\n                          you could pass whatever you want as props to\n                          a component like this, including the entire\n                          table instance. But for this example, we'll just\n                          pass the row\n                        */}\n\t\t\t\t\t\t\t\t\t\t\t{renderRowSubComponent({ row })}\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<br />\n\t\t\t<div>Showing the first 20 results of {rows.length} rows</div>\n\t\t</>\n\t);\n}\n\nexport default Table;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC,C,CAEA;AACA;AACA;;;;;AACA,SAASC,KAAT,OAAyD;EAAA;;EAAA,IAA1C;IAAEC,OAAF;IAAWC,IAAX;IAAiBC;EAAjB,CAA0C;EACxDC,OAAO,CAACC,GAAR,CAAYJ,OAAZ;EACA,MAAM;IACLK,aADK;IAELC,iBAFK;IAGLC,YAHK;IAILC,IAJK;IAKLC,UALK;IAMLC,cANK;IAOL;IACAC,KAAK,EAAE;MAAEC;IAAF;EARF,IASFf,QAAQ,CACX;IACCG,OADD;IAECC;EAFD,CADW,EAKXH,WALW,CAKC;EACZ;EANW,CATZ;EAkBA,oBACC;IAAA,wBACC,sBAAWO,aAAa,EAAxB;MAAA,wBACC;QAAA,UACEE,YAAY,CAACM,GAAb,CAAkBC,WAAD,iBACjB,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;UAAA,UACED,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACxB,mBAAQA,MAAM,CAACC,cAAP,EAAR;YAAA,UAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd;UAAlC;YAAA;YAAA;YAAA;UAAA,QADA;QADF;UAAA;UAAA;UAAA;QAAA,QADA;MADF;QAAA;QAAA;QAAA;MAAA,QADD,eAUC,sBAAWb,iBAAiB,EAA5B;QAAA,UACEE,IAAI,CAACK,GAAL,CAAS,CAACO,GAAD,EAAMC,CAAN,KAAY;UACrBZ,UAAU,CAACW,GAAD,CAAV;UACA;YAAA;YACC;YACA,QAAC,KAAD,CAAO,QAAP,OAAoBA,GAAG,CAACE,WAAJ,EAApB;cAAA,wBACC;gBAAA,UACEF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAeW,IAAD,IAAU;kBACxB,oBAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;oBAAA,UAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ;kBAA9B;oBAAA;oBAAA;oBAAA;kBAAA,QAAP;gBACA,CAFA;cADF;gBAAA;gBAAA;gBAAA;cAAA,QADD,EAUEC,GAAG,CAACM,UAAJ,gBACA;gBAAA,uBACC;kBAAI,OAAO,EAAEhB,cAAc,CAACiB,MAA5B;kBAAA,UAQEzB,qBAAqB,CAAC;oBAAEkB;kBAAF,CAAD;gBARvB;kBAAA;kBAAA;kBAAA;gBAAA;cADD;gBAAA;gBAAA;gBAAA;cAAA,QADA,GAaG,IAvBL;YAAA;cAAA;cAAA;cAAA;YAAA;UAFD;QA4BA,CA9BA;MADF;QAAA;QAAA;QAAA;MAAA,QAVD;IAAA;MAAA;MAAA;MAAA;IAAA,QADD,eA6CC;MAAA;MAAA;MAAA;IAAA,QA7CD,eA8CC;MAAA,+CAAsCZ,IAAI,CAACmB,MAA3C;IAAA;MAAA;MAAA;MAAA;IAAA,QA9CD;EAAA,gBADD;AAkDA;;GAtEQ5B,K;UAWJF,Q;;;KAXIE,K;AAwET,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}