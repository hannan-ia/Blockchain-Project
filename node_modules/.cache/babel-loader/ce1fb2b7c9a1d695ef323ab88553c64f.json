{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\hanna\\\\Desktop\\\\attempt1\\\\Blockchain-Project-Front-End\\\\src\\\\Components\\\\Table\\\\table.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useExpanded } from 'react-table'; // A simple way to support a renderRowSubComponent is to make a render prop\n// This is NOT part of the React Table API, it's merely a rendering\n// option we are creating for ourselves in our table renderer\n\nfunction Table({\n  columns,\n  data,\n  renderRowSubComponent\n}) {\n  _s();\n\n  console.log(columns);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    visibleColumns,\n    // eslint-disable-next-line no-unused-vars\n    state: {\n      expanded\n    }\n  } = useTable({\n    columns,\n    data\n  }, useExpanded // We can useExpanded to track the expanded state\n  // for sub components too!\n  );\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            /*#__PURE__*/\n            // Use a React.Fragment here so the table markup is still valid\n            _jsxDEV(React.Fragment, { ...row.getRowProps(),\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                children: row.cells.map(cell => {\n                  return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                    children: cell.render('Cell')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 48,\n                    columnNumber: 18\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 9\n              }, this), row.isExpanded ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: visibleColumns.length,\n                  children: renderRowSubComponent({\n                    row\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 11\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 10\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 8\n            }, this)\n          );\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Showing the first 20 results of \", rows.length, \" rows\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Table, \"Y1ybWph3yf/wg3W9eqkBIAhb+v4=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/hanna/Desktop/attempt1/Blockchain-Project-Front-End/src/Components/Table/table.js"],"names":["React","useTable","useExpanded","Table","columns","data","renderRowSubComponent","console","log","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","visibleColumns","state","expanded","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","isExpanded","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC,C,CAEA;AACA;AACA;;AACA,SAASC,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA;AAAjB,CAAf,EAAyD;AAAA;;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,QAAM;AACLK,IAAAA,aADK;AAELC,IAAAA,iBAFK;AAGLC,IAAAA,YAHK;AAILC,IAAAA,IAJK;AAKLC,IAAAA,UALK;AAMLC,IAAAA,cANK;AAOL;AACAC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AARF,MASFf,QAAQ,CACX;AACCG,IAAAA,OADD;AAECC,IAAAA;AAFD,GADW,EAKXH,WALW,CAKC;AACZ;AANW,GATZ;AAkBA,sBACC;AAAA,4BACC,sBAAWO,aAAa,EAAxB;AAAA,8BACC;AAAA,kBACEE,YAAY,CAACM,GAAb,CAAkBC,WAAD,iBACjB,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,oBACED,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACxB,mBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,sBAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd;AAAlC;AAAA;AAAA;AAAA;AAAA,kBADA;AADF;AAAA;AAAA;AAAA;AAAA,gBADA;AADF;AAAA;AAAA;AAAA;AAAA,cADD,eAUC,sBAAWb,iBAAiB,EAA5B;AAAA,kBACEE,IAAI,CAACK,GAAL,CAAS,CAACO,GAAD,EAAMC,CAAN,KAAY;AACrBZ,UAAAA,UAAU,CAACW,GAAD,CAAV;AACA;AAAA;AACC;AACA,oBAAC,KAAD,CAAO,QAAP,OAAoBA,GAAG,CAACE,WAAJ,EAApB;AAAA,sCACC;AAAA,0BACEF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAeW,IAAD,IAAU;AACxB,sCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,8BAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,0BAAP;AACA,iBAFA;AADF;AAAA;AAAA;AAAA;AAAA,sBADD,EAUEC,GAAG,CAACM,UAAJ,gBACA;AAAA,uCACC;AAAI,kBAAA,OAAO,EAAEhB,cAAc,CAACiB,MAA5B;AAAA,4BAQEzB,qBAAqB,CAAC;AAAEkB,oBAAAA;AAAF,mBAAD;AARvB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,sBADA,GAaG,IAvBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAFD;AA4BA,SA9BA;AADF;AAAA;AAAA;AAAA;AAAA,cAVD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eA6CC;AAAA;AAAA;AAAA;AAAA,YA7CD,eA8CC;AAAA,qDAAsCZ,IAAI,CAACmB,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,YA9CD;AAAA,kBADD;AAkDA;;GAtEQ5B,K;UAWJF,Q;;;KAXIE,K;AAwET,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\n\r\nimport { useTable, useExpanded } from 'react-table';\r\n\r\n// A simple way to support a renderRowSubComponent is to make a render prop\r\n// This is NOT part of the React Table API, it's merely a rendering\r\n// option we are creating for ourselves in our table renderer\r\nfunction Table({ columns, data, renderRowSubComponent }) {\r\n\tconsole.log(columns);\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t\tvisibleColumns,\r\n\t\t// eslint-disable-next-line no-unused-vars\r\n\t\tstate: { expanded },\r\n\t} = useTable(\r\n\t\t{\r\n\t\t\tcolumns,\r\n\t\t\tdata,\r\n\t\t},\r\n\t\tuseExpanded // We can useExpanded to track the expanded state\r\n\t\t// for sub components too!\r\n\t);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<table {...getTableProps()}>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t{headerGroups.map((headerGroup) => (\r\n\t\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t\t{headerGroup.headers.map((column) => (\r\n\t\t\t\t\t\t\t\t<th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t\t\t{rows.map((row, i) => {\r\n\t\t\t\t\t\tprepareRow(row);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t// Use a React.Fragment here so the table markup is still valid\r\n\t\t\t\t\t\t\t<React.Fragment {...row.getRowProps()}>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t{row.cells.map((cell) => {\r\n\t\t\t\t\t\t\t\t\t\treturn <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t{/*\r\n                    If the row is in an expanded state, render a row with a\r\n                    column that fills the entire length of the table.\r\n                  */}\r\n\t\t\t\t\t\t\t\t{row.isExpanded ? (\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td colSpan={visibleColumns.length}>\r\n\t\t\t\t\t\t\t\t\t\t\t{/*\r\n                          Inside it, call our renderRowSubComponent function. In reality,\r\n                          you could pass whatever you want as props to\r\n                          a component like this, including the entire\r\n                          table instance. But for this example, we'll just\r\n                          pass the row\r\n                        */}\r\n\t\t\t\t\t\t\t\t\t\t\t{renderRowSubComponent({ row })}\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t<br />\r\n\t\t\t<div>Showing the first 20 results of {rows.length} rows</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}